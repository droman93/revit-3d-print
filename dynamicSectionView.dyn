<Workspace Version="1.2.1.3083" X="-976.11594907194" Y="267.612682263987" zoom="1.01069398204528" Name="Home" Description="" RunType="Manual" RunPeriod="1000" HasRunWithoutCrash="True">
  <NamespaceResolutionMap />
  <Elements>
    <PythonNodeModels.PythonNode guid="de398f19-9dda-4448-b260-d97475bc1588" type="PythonNodeModels.PythonNode" nickname="DynamicSectionView:Python Script" x="1555.45241716312" y="48.3876835980456" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" inputcount="5">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <PortInfo index="3" default="False" />
      <PortInfo index="4" default="False" />
      <Script>import clr
clr.AddReference('ProtoGeometry')
from Autodesk.DesignScript.Geometry import *

# Import Element wrapper extension methods
clr.AddReference('RevitNodes')
import Revit
clr.ImportExtensions(Revit.Elements)

# Import geometry conversion extension methods
clr.ImportExtensions(Revit.GeometryConversion)

# Import DocumentManager and TransactionManager
clr.AddReference('RevitServices')
import RevitServices
from RevitServices.Persistence import DocumentManager
from RevitServices.Transactions import TransactionManager

# Import RevitAPI
clr.AddReference('RevitAPI')
import Autodesk
from Autodesk.Revit.DB import *
from Autodesk.Revit.DB import FilteredElementCollector as _FilteredElementCollector
from Autodesk.Revit.DB import ViewFamilyType as _ViewFamilyType

import System
from System import Array
from System.Collections.Generic import *
import sys

import math


def get_ViewFamilyTypeId(viewFamilyTypeName):	
	names = []
	ids = []
	viewFamilyTypeId = -1
	collector = _FilteredElementCollector(doc).OfClass(_ViewFamilyType) #collecting all elements of type ViewFamilyType
	for t in collector:
		names.append(t.FamilyName)
		ids.append(t.Id)
		if t.FamilyName == viewFamilyTypeName:
			viewFamilyTypeId = t.Id
			break # get the first
	return viewFamilyTypeId
			
			
def create_view(doc, viewFamilyTypeId, boundingBox, voxel_size):		
	if viewFamilyTypeId != -1:
		TransactionManager.Instance.EnsureInTransaction(doc)
		
		boundingBoxSlice = boundingBox
		boundingBoxSlice.Max = XYZ(boundingBox.Max.X, boundingBox.Max.Y, boundingBox.Min.Z + voxel_size)  # adjust boundingbox for far clip offset		
		sectionView = ViewSection.CreateDetail(doc, viewFamilyTypeId, boundingBoxSlice) # http://www.revitapidocs.com/2016/834e7154-b2f0-ffcd-b04a-9ad8cee321c8.htm			
		
		viewId = Autodesk.Revit.DB.ElementId(int(str(sectionView.Id)) - 1)
		axis = Line.CreateBound(XYZ(0, 0, 0), XYZ(1, 0, 0))  # flip DetailView direction
		ElementTransformUtils.RotateElement(doc, viewId, axis, math.pi)	
		
		TransactionManager.Instance.TransactionTaskDone()
		return sectionView


def update_view(doc, view, voxel_size):
	TransactionManager.Instance.EnsureInTransaction(doc)	
	translationVec = XYZ(0, 0, voxel_size)
	viewId = Autodesk.Revit.DB.ElementId(int(str(view.Id)) - 1)
	ElementTransformUtils.MoveElement(doc, viewId, translationVec)	
	TransactionManager.Instance.TransactionTaskDone()
	return sectionView, height
	
	
def export_view_image(view, path, image_width, doc):
	TransactionManager.Instance.EnsureInTransaction(doc)
	ieo = ImageExportOptions()
	ieo.ExportRange = ExportRange.SetOfViews
	ieo.SetViewsAndSheets([view.Id])
	ieo.FilePath = path	
	ieo.HLRandWFViewsFileType = ImageFileType.PNG
	ieo.ShadowViewsFileType = ImageFileType.PNG
	ieo.PixelSize = image_width
	doc.ExportImage(ieo)
	TransactionManager.Instance.TransactionTaskDone()
	
	
def delete_views(doc, views):
	TransactionManager.Instance.EnsureInTransaction(doc)	
	for view in views:
		doc.Delete(view.Id)
	TransactionManager.Instance.TransactionTaskDone()


def apply_viewTemplate(doc, view, viewTemplateName):
	viewTemplate = None
	collector = FilteredElementCollector(doc).OfClass(View)
	for i in collector:
		if i.IsTemplate == True and i.Name == viewTemplateName:
			viewTemplate = i
	
	TransactionManager.Instance.EnsureInTransaction(doc)
	if viewTemplate is not None:
		view.ViewTemplateId = viewTemplate.Id
	TransactionManager.Instance.TransactionTaskDone()


def get_scopeBox(name):
	collector = FilteredElementCollector(doc)
	elements = collector.OfCategory(BuiltInCategory.OST_VolumeOfInterest).ToElements()
	for element in elements:
		if element.Name == name:
			return element


filePath = IN[0]
scale = IN[1]
scopeBox_name = IN[2]
viewTemplateName = IN[3]
is_delete = IN[4]

doc = DocumentManager.Instance.CurrentDBDocument
scopeBox = get_scopeBox(scopeBox_name)

#try:
count = -1
heights = []

viewFamilyTypeId = get_ViewFamilyTypeId("Detail View")
boundingBox = scopeBox.get_BoundingBox(None) # https://github.com/DynamoDS/DynamoRevit/blob/Revit2015/src/Libraries/RevitNodes/Elements/Element.cs

voxel_size = 1  # feet to inch, scale has been set to DetailView
image_width = (boundingBox.Max.X - boundingBox.Min.X) * 12.0 / scale  # feet to inch
OUT = image_width
return


bottom = boundingBox.Min.Z
top = boundingBox.Max.Z
height = bottom
digit = len(str(int((top - bottom) / voxel_size))) 	

sectionView = create_view(doc, viewFamilyTypeId, boundingBox, voxel_size)
apply_viewTemplate(doc, sectionView, viewTemplateName)

while height &lt; top:
	# if count &gt; 5:  # TEMP for test
	# 	break

	heights.append(height)

	height += voxel_size	
	update_view(doc, sectionView, voxel_size)
	
	imageName = filePath + "\\" + str(count).rjust(digit)
	export_view_image(sectionView, imageName, image_width, doc)
	
	count += 1
	
if is_delete:
	delete_views(doc, [sectionView])
	
TransactionManager.Instance.ForceCloseTransaction()  # Dynamo transaction force close order
		
OUT = "succeed", sectionView, pixel_size, boundingBox.Min, boundingBox.Max, heights
#except Exception as e:
#	OUT =  "failed", e
</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CodeBlockNodeModel guid="d5c1fe87-270a-4c1b-9e06-f0552677a491" type="Dynamo.Graph.Nodes.CodeBlockNodeModel" nickname="Code Block" x="1027.20096471883" y="45.5044096549602" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" CodeText="&quot;C:\Dynamo\\test\ViewRange\\test_views\\slice&quot;;&#xA;10;&#xA;&quot;Scope Box 3&quot;;&#xA;&quot;3d Print&quot;;&#xA;false;" ShouldFocus="false" />
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="d5c1fe87-270a-4c1b-9e06-f0552677a491" start_index="0" end="de398f19-9dda-4448-b260-d97475bc1588" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="d5c1fe87-270a-4c1b-9e06-f0552677a491" start_index="1" end="de398f19-9dda-4448-b260-d97475bc1588" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="d5c1fe87-270a-4c1b-9e06-f0552677a491" start_index="2" end="de398f19-9dda-4448-b260-d97475bc1588" end_index="2" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="d5c1fe87-270a-4c1b-9e06-f0552677a491" start_index="3" end="de398f19-9dda-4448-b260-d97475bc1588" end_index="3" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="d5c1fe87-270a-4c1b-9e06-f0552677a491" start_index="4" end="de398f19-9dda-4448-b260-d97475bc1588" end_index="4" portType="0" />
  </Connectors>
  <Notes>
    <Dynamo.Graph.Notes.NoteModel guid="1f7ed75c-d75a-48b6-ad1d-3087eb4cd3ec" text="para1: image export directory&#xD;&#xA;para2: scale: digit vs. print&#xD;&#xA;para3: ScopeBox name&#xD;&#xA;para4: ViewTemplate name&#xD;&#xA;para5: delete temporary DetailView afterward" x="1019.67684410681" y="-62.4792296066348" />
  </Notes>
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>
